##
## Copyright (C) 2005-2015 Schlichtherle IT Services.
## All rights reserved. Use is subject to license terms.
##
#parse("_stddef.md.vm")
#title("Generating Your Project")

This page shows you how to generate your project from the $project.name.
Generating a project from the archetype involves customizing a set of property
values as explained below.

$h3 Important Notes

1. **If you want to change the value of any of the following properties then
   it's generally necessary to generate another project from the TrueLicense 
   Maven Archetype.**
2. **For any two generated projects, their license keys are not compatible even
   if all property values are equal, unless both projects also share a copy of
   the same key store files:**
    * `${artifactId}-keygen/src/main/resources/${dollar}{privateKeyStoreFile}`,
    * `${artifactId}-keymgr/src/main/resources/${dollar}{ftpKeyStoreFile}` and
    * `${artifactId}-keymgr/src/main/resources/${dollar}{publicKeyStoreFile}`.

$h3 Generation Action

Please copy the following sample command, customize the property values to
match your licensing schema and paste the result into a shell:

    ${dollar} mvn archetype:generate -B \
        -DarchetypeArtifactId=$project.artifactId \
        -DarchetypeGroupId=$project.groupId \
        -DarchetypeVersion=$project.version \
        -DartifactId=license \
        -DcompanyName="Company Inc." \
        -DdefaultPassword=test1234 \
        -DgroupId=com.company.product \
        -DlicensingSubject="Product 1" \
        -Dversion=1.0-SNAPSHOT
    [...]

Throughout this tutorial, a leading `${dollar} ` indicates a shell prompt and
a `[...]` indicates command output, so please don't copy/paste these.
The properties `archetypeArtifactId`, `archetypeGroupId` and `archetypeVersion`
reference the $project.name itself, so you shouldn't change their values.
All other property values are customizable as explained in the following
reference.

Furthermore, you may sometimes see an expression starting with a `${dollar}`,
followed by a name in braces.
Such an expression is a reference to the value of the equal named property.
For example, assuming that the project is generated as shown above, the
expression `${dollar}{package}` is a reference to the value
`com.company.product`.
This syntax has been borrowed from [Apache Maven].

Upon successful execution, a new directory with the artifact ID as its name
exists in the current directory.
For the rest of this documentation, all commands assume that this is the
current directory, so you need to change to it now:

    ${dollar} cd ${dollar}{artifactId}

$h3 Property Reference

Following is the list of properties for generating a project from the
$project.name in alphabetic order.
Note that property values are generally _case sensitive_.

<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Default Value</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><code>artifactId</code></td>
            <td>n/a</td>
            <td>The artifact ID of the parent 
                <a href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html"><abbr title="Project Object Model">POM</abbr></a> 
                for the generated project. 
                This could match the name of your software product, e.g. 
                <code>product</code>, or be generic, e.g. <code>license</code>. 
                Whatever it is, it should be a lower-case string and must not 
                contain spaces.
                See <a href="http://maven.apache.org/pom.html#Maven_Coordinates">Maven - POM Reference - Maven Coordinates</a>.</td>
        </tr>
        <tr>
            <td><code>artifactName</code></td>
            <td><code>-</code></td>
            <td>The display name of the parent POM for the generated project.
                This could be the name of your software product, e.g. 
                <code>Product</code>, or be generic, e.g. <code>License</code>.</td>
        </tr>
        <tr>
            <td><code>companyName</code></td>
            <td>n/a</td>
            <td>The display name of your company, e.g. <code>Company Inc.</code>.</td>
        </tr>
        <tr>
            <td><code>defaultPassword</code></td>
            <td>n/a</td>
            <td>The default password for everything.
                If you feel lazy, then the only password you need to edit is this
                one before running the build for the first time.
                As a general requirement, all passwords must be at least eight
                characters long and contain letters and digits.
                You should consider this to be the bare minimum.
                Entering a longer password with additional punctation characters
                improves the security level of your licensing schema.</td>
        </tr>
        <tr>
            <td><code>disableLicenseWizard</code></td>
            <td><code>false</code></td>
            <td>Whether or not the Swing wizard dialog in the Key Manager module
                should be disabled.
                One of <code>false</code> or <code>true</code>.
                Selecting <code>true</code> cuts the dependency on the TrueLicense Swing 
                module and reduces the code size.</td>
        </tr>
        <tr>
            <td><code>dynamicClassLoading</code></td>
            <td><code>false</code></td>
            <td>Whether or not the classes referenced by the properties with the
                name pattern <code>*Class</code> should get dynamically loaded at runtime.
                One of <code>false</code> or <code>true</code>.
                Select <code>false</code> to statically <code>new</code> the classes in the generated 
                code.
                The advantage is that the classes can be safely included in the
                byte code obfuscation process.
                However, the classes need to be present on the class path of the
                respective module at compile time.
                Select <code>true</code> to dynamically load the classes at runtime.
                The advantage is that the classes only need to be present on the
                class path of the respective module at runtime.
                However, the classes need to be excluded from the byte code
                obfuscation process, which is a security leak if any dynamic class 
                loading is done in the Key Manager module.</td>
        </tr>
        <tr>
            <td><code>editions</code></td>
            <td><code>standard</code></td>
            <td>A comma separated list of edition names, ordered from supersets to
                subsets.
                Each name must be a valid Java identifier and should be a
                camel-case string with a lower-case initial character.
                The names <code>edition</code> and <code>ftp</code> are reserved for internal use.
                Example: <code>enterprise, standard</code>.</td>
        </tr>
        <tr>
            <td><code>freeTrialPeriod</code></td>
            <td><code>0</code></td>
            <td>The number of days for an auto-generated <abbr title="Free Trial Period">FTP</abbr>.
                Needs to be a non-negative integer, e.g. <code>30</code>.
                Specify <code>0</code> to disable the auto-generation of an FTP license key.</td>
        </tr>
        <tr>
            <td><code>ftpKeyStoreFile</code></td>
            <td><code>-</code></td>
            <td>The path of the FTP key store file in the Key Manager module
                relative to the base path 
                <code>${dollar}{artifactId}-keymgr/src/main/resources/</code>. 
                The value of this property is ignored if the value of the property
                <code>freeTrialPeriod</code> is <code>0</code>.
                Otherwise, if the value is set to <code>-</code>, then it gets 
                overridden with the value of the property <code>publicKeyStoreFile</code>.</td>
        </tr>
        <tr>
            <td><code>ftpSecretMarkerClass</code></td>
            <td>n/a</td>
            <td>A fully qualified class name which defines the user or system
                preferences node to use for storing the auto-generated FTP license 
                key.
                The value of this property is ignored if the value of the property 
                <code>freeTrialPeriod</code> is <code>0</code>.
                Otherwise, the <strong>package name</strong> of the referenced class needs to be
                kept <strong>absolutely secret</strong> because removing the FTP license key from
                the preferences node triggers the auto-generation of another FTP
                license key!
                The named class gets dynamically loaded at run time, so it doesn't
                have to be on the compile time class path of the Key Manager 
                module.</td>
        </tr>
        <tr>
            <td><code>groupId</code></td>
            <td>n/a</td>
            <td>The group ID of the generated project.
                This could be the reversed domain name for your company plus
                the name of the software product.
                See <a href="http://maven.apache.org/pom.html#Maven_Coordinates">Maven - POM Reference - Maven Coordinates</a>.</td>
        </tr>
        <tr>
            <td><code>hideUninstallAction</code></td>
            <td><code>false</code></td>
            <td>Whether or not the Swing wizard dialog in the Key Manager module 
                should hide the action for uninstalling the license key.
                One of <code>false</code> or <code>true</code>.</td>
        </tr>
        <tr>
            <td><code>keyGenLicenseValidationClass</code></td>
            <td>n/a</td>
            <td>A fully qualified class name which implements the interface
                <a href="../apidocs/org/truelicense/api/LicenseValidation.html"><code>org.truelicense.api.LicenseValidation</code></a> for use in the Key 
                Generator module.
                The value of this property is ignored if the value of the property
                <code>keyGenLicenseValidationFunction</code> is <code>basic</code>.</td>
        </tr>
        <tr>
            <td><code>keyGenLicenseValidationFunction</code></td>
            <td><code>basic</code></td>
            <td>Selects the function for license validation in the Key Generator 
                module.
                One of <code>basic</code>, <code>custom</code> or <code>both</code>.
                Select <code>basic</code> to use only the basic license validation which is
                implemented in the TrueLicense Core module.
                Select <code>custom</code> to use only the custom license validation which
                is implemented in the class referenced by the property
                <code>keyGenLicenseValidationClass</code>.
                Select <code>both</code> to use both functions.</td>
        </tr>
        <tr>
            <td><code>keyMgrClockClass</code></td>
            <td><code>-</code></td>
            <td>A fully qualified class name which implements the interface
                <a href="../apidocs/org/truelicense/api/misc/Clock.html"><code>org.truelicense.api.misc.Clock</code></a> for use in the Key Manager
                module.
                Select <code>-</code> to use the system clock.</td>
        </tr>
        <tr>
            <td><code>keyMgrLicenseValidationClass</code></td>
            <td>n/a</td>
            <td>A fully qualified class name which implements the interface
                <a href="../apidocs/org/truelicense/api/LicenseValidation.html"><code>org.truelicense.api.LicenseValidation</code></a> for use in the Key 
                Manager module.
                The value of this property is ignored if the value of the property
                <code>keyMgrLicenseValidationFunction</code> is <code>basic</code>.</td>
        </tr>
        <tr>
            <td><code>keyMgrLicenseValidationFunction</code></td>
            <td><code>basic</code></td>
            <td>Selects the function for license validation in the Key Manager 
                module.
                One of <code>basic</code>, <code>custom</code> or <code>both</code>.
                Select <code>basic</code> to use only the basic license validation which is
                implemented in the TrueLicense Core module.
                Select <code>custom</code> to use only the custom license validation which
                is implemented in the class referenced by the property
                <code>keyMgrLicenseValidationClass</code>.
                Select <code>both</code> to use both functions.</td>
        </tr>
        <tr>
            <td><code>keyPairAlgorithm</code></td>
            <td><code>RSA</code></td>
            <td>The algorithm to use when generating key pairs in the key store
                files at the first build.
                This property is ignored if the key store files already exist.
                Otherwise, the algorithm needs to be supported by one of the 
                security providers which are installed in the JRE.
                At a minimum, <code>DSA</code> and <code>RSA</code> need to be available in any
                compliant JRE.</td>
        </tr>
        <tr>
            <td><code>keyStoreType</code></td>
            <td><code>-</code></td>
            <td>The default key store type.
                The type needs to be supported by one of the security 
                providers which are installed in the JRE.
                If the value is set to <code>-</code>, then it gets overridden 
                as follows:
                If the value of the <code>licenseKeyFormat</code> property is 
                set to <code>V1</code>, then this gets set to
                <code>JKS</code>, otherwise it gets set to
                <code>JCEKS</code>.</td>
        </tr>
        <tr>
            <td><code>licenseKeyFormat</code></td>
            <td><code>V2/JSON</code></td>
            <td>The format of the license keys.
                One of <code>V1</code>, <code>V2/JSON</code> or <code>V2/XML</code>.
                Select <code>V1</code> if you need to retain compatiblity with license
                keys generated with TrueLicense 1.
                Otherwise, select <code>V2/XML</code> if you want to exclude an additional
                dependency on the Jackson JSON Processor.
                Otherwise, select <code>V2/JSON</code> for the smallest license keys and the
                fastest processing.</td>
        </tr>
        <tr>
            <td><code>licensingSubject</code></td>
            <td>n/a</td>
            <td>The licensing subject.
                The value of this property gets stored in the generated license
                keys and is used for validation.
                A <a href="../apidocs/org/truelicense/api/LicenseValidationException.html"><code>org.truelicense.api.LicenseValidationException</code></a>
                is thrown if the validation fails.
                It's best practice to include the name of your software product
                and a version number range for which the license keys are valid,
                e.g. <code>Product 1</code> or <code>Product 1.X</code>.
                The license validation step compares the entire string, so the
                version number format doesn't matter.
                If you want to obsolete existing license keys in a future release
                then all you need to do is to change the value,
                e.g. to <code>Product 2</code> or <code>Product 2.X</code>.</td>
        </tr>
        <tr>
            <td><code>package</code></td>
            <td><code>${dollar}{groupId}</code></td>
            <td>The base package name of the generated project.
                It's best practice to use the expression <code>${groupId}</code>
                or <code>${groupId}.${artifactId}</code> as the package name
                if this results in a valid package name.</td>
        </tr>
        <tr>
            <td><code>pbeAlgorithm</code></td>
            <td><code>-</code></td>
            <td>The algorithm for the password based encryption.
                The algorithm needs to be supported by one of the security 
                providers which are installed in the JRE.
                If the value is set to <code>-</code>, then it gets overridden 
                as follows:
                If the value of the <code>licenseKeyFormat</code> property is 
                set to <code>V1</code>, then this gets set to
                <code>PBEWithMD5AndDES</code>, otherwise it gets set to
                <code>PBEWithSHA1AndDESede</code>.</td>
        </tr>
        <tr>
            <td><code>preferencesNodeType</code></td>
            <td><code>user</code></td>
            <td>The type of the preferences nodes where to install license keys.
                One of <code>system</code> or <code>user</code>.
                Note that <code>system</code> generally requires the JVM to be run with
                administrator privileges or otherwise a
                <a href="http://docs.oracle.com/javase/6/docs/api/java/util/prefs/BackingStoreException.html"><code>java.util.prefs.BackingStoreException</code></a>
                may get thrown by the generated integration tests.</td>
        </tr>
        <tr>
            <td><code>privateKeyStoreFile</code></td>
            <td><code>private.ks</code></td>
            <td>The path of the private key store file in the Key Generator module
                relative to the base path
                <code>${dollar}{artifactId}-keygen/src/main/resources/</code>.</td>
        </tr>
        <tr>
            <td><code>publicKeyStoreFile</code></td>
            <td><code>public.ks</code></td>
            <td>The path of the public key store file in the Key Manager module
                relative to the base path
                <code>${dollar}{artifactId}-keymgr/src/main/resources/</code>.</td>
        </tr>
        <tr>
            <td><code>trueLicenseDependency</code></td>
            <td><code>-</code></td>
            <td>The name of the module to depend upon for base functionality 
                like vending or consuming license keys.
                One of <code>-</code>, <code>truelicense-core</code> or <code>truelicense-json</code>.
                If the value is set to <code>-</code>, then it gets overridden 
                as follows:
                If the value of the <code>licenseKeyFormat</code> property is 
                set to <code>V2/JSON</code>, then this gets set to
                <code>truelicense-json</code>, otherwise it gets set to 
                <code>truelicense-core</code>.</td>
        </tr>
        <tr>
            <td><code>trueLicenseVersion</code></td>
            <td><code>$project.version</code></td>
            <td>The TrueLicense version to depend upon.</td>
        </tr>
        <tr>
            <td><code>verboseCli</code></td>
            <td><code>false</code></td>
            <td>Whether or not the <abbr title="Command Line Interface">CLI</abbr> should write
                debugging information to the standard error stream by default.
                One of <code>false</code> or <code>true</code>.</td>
        </tr>
        <tr>
            <td><code>version</code></td>
            <td>n/a</td>
            <td>The version of the generated project.
                This should be the version of your software product.
                Whatever it is, it needs to match the
                <a href="http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-pom-syntax.html#pom-reationships-sect-versions">Maven version number</a> requirements.
                See <a href="http://maven.apache.org/pom.html#Maven_Coordinates">Maven - POM Reference - Maven Coordinates</a>.</td>
        </tr>
    </tbody>
</table>

---

#prev("Prerequisites" "prerequisites.html")
#next("Example Configurations" "examples.html")
