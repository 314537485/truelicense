##
## Copyright (C) 2005-2015 Schlichtherle IT Services.
## All rights reserved. Use is subject to license terms.
##
#parse("_include.vm")
#title("Updating Your Project")

This page shows you how to update your project _after_ you have put it into
production for selling license keys.
**If you have not put the project into production yet then this page does
not apply to you!**
In particular, if you want to change any of the properties when
[generating your project] then please repeat this process and generate
another project.

$h3 Overview

The `pom.xml` file in the project directory contains an XML element named
`properties`:

    <project [...]>
        <properties>
            [...]
        </properties>
    </project>

Its contents are a list of <abbr title="eXtensible Markup Language">XML</abbr>
elements in the form `<name>value</name>`.
Each element defines a property name and value.
These properties are used for code generation, e.g. there is a property named
`subject` whose value defines the subject of the license 
management - see below.
Their values have been computed from the property values you have provided to
the $project.name when generating your project.

$h4 Warning

**Changing the property values in the `pom.xml` file generally breaks the
compatibility with existing license keys!**
Don't do this except for the following use cases as explained below.
If you have not already done so, then **please 
[set-up a VCS](setting-up-vcs.html) for your project now!**

---

$h3 Limiting License Key Validity

Let's assume you want to limit the validity of the license keys for your
software product to a particular version number range, e.g. the same major
version number.
Then you should include this version number range, e.g. the major version
number 1, in the value of the property named `subject`:

    <subject>Product 1</subject>

Later, when you want to transition to a new version number range, e.g. from
major version number 1 to 2, then all you have to do in order to invalidate all
previously generated license keys is to update the property value accordingly:

    <subject>Product 2</subject>

It does not matter how you format the version number range in the licensing
subject because the validation function simply checks the equality of the
complete string.
So if you like, you could also set the property value to `Product 1.x` or
`Product 2.x` instead of `Product 1` or `Product 2`, respectively.
If an invalid license key is found by TrueLicense, e.g. because a user hasn't
bought another license key for your new release, then a
[`net.truelicense.api.LicenseValidationException`](../apidocs/net/truelicense/api/LicenseValidationException.html)
gets thrown.

---

$h3 Adding an Edition

$h4 Adding the Name

Let's assume you want to add another edition to your software product so that
you can sell another type of license keys for the new edition.
The value of the property named `editions` defines a comma separated list
of edition names, ordered from supersets to subsets.
Each name must be a valid Java identifier and should be
camel-cased with the initial character being lower-cased.
The name "ftp" is reserved for an auto-generated free trial period.
If you didn't define a value for this property when
[generating your project], then the default value is `standard`:

    <editions>standard</editions>

You can simply add the name of the new edition to this list.
Mind the sorting order from supersets to subsets.

For example, if you want to add an _Enterprise Edition_ which shall be a
_superset_ of the existing _Standard Edition_ (sold at a higher price),
then you need to insert the name of the `enterprise` edition _before_ the name
of the `standard` edition:

    <editions>enterprise standard</editions>

On the other hand, if you want add a _Lite Edition_ which shall be a
_subset_ of the existing _Standard Edition_ (sold at a lower price),
then you need to append the name of the `lite` edition _after_ the name of the
`standard` edition:

    <editions>standard lite</editions>

$h4 Adding Passwords

For each edition, TrueLicense needs passwords for
(a) accessing the private key for signing license beans and
(b) encrypting and decrypting license keys.

If you don't configure a password for (a), then it defaults to the password
used for verying the integrity of the private keystore, which in turn defaults
to the default password defined when generating your project.
You don't need to change this password at all, but if you want to, then you can
do so by adding a property named `${dollar}{edition}KeyEntryPassword`, where you
need to replace `${dollar}{edition}` with the name of the new edition.
For example, you can add a password for an edition named `enterprise` like this:

    <enterpriseKeyEntryPassword>[...]</enterpriseKeyEntryPassword>

If you don't configure a password for (b), then it defaults to the default
password defined when generating your project.
Again, you don't need to change this password, but if you want to, then you can
do so by adding a property named `${dollar}{edition}PbePassword`, where you need
to replace `${dollar}{edition}` with the name of the new edition.
For example, you can add a password for an edition named `enterprise` like this:

    <enterprisePbePassword>[...]</enterprisePbePassword>

$h4 Updating Keystores

Next, the private and public keystores need to get updated so that they
contain an entry for the new edition.
This is done automatically when you are [building your project] for
the very first time.
However, because the new edition is added as an afterthought, this needs to be
done manually.
The general pattern for this step is to run the following command:

    ${dollar} mvn generate-resources \
        -Pgenerate-private-key-store \
        -Pgenerate-public-key-store \
        -Deditions=${dollar}{edition}
    [...]

... where you need to replace `${dollar}{edition}` with the name of the new
feature set.
For example, you can update the keystores for an edition named `enterprise`
like this:

    ${dollar} mvn generate-resources \
        -Pgenerate-private-key-store \
        -Pgenerate-public-key-store \
        -Deditions=enterprise
    [...]

$h4 Purchasing a TrueLicense Certificate

Mind that you need to buy another TrueLicense certificate for each feature
set you want to add or otherwise you are required to open source your software
product under the terms of the
[GNU AFFERO GENERAL PUBLIC LICENSE, Version 3](license.html#GNU_AFFERO_GENERAL_PUBLIC_LICENSE_Version_3_19_November_2007).
See [certifying your project].

---

$h3 Migrating Your Project

Let's assume you want to update your project and benefit from the latest
improvements in TrueLicense.
In this case, you need to generate a _new project_ and customize it so that
it's fully compatible with existing license keys, i.e. it must be possible to
share the same license keys between the old and the new project.

$h4 Generating Your project

First, you need to generate the new project by following the instructions in
the page [generating your project] and defining the value of the
properties as explained in the following sections.

$h5 Migrating from the $project.name before version 2.4

If the old project was generated using the $project.name before version 2.4, then
you need to define the values of the following properties as follows:

<dl class="dl-horizontal dt-wide">
    <dt><code>password</code></dt>
    <dd>Enter the value produced by the obfuscated string field 
        <code>PBE_PASSWORD</code> in the class 
        <code>**.keymgr.LicensingSchema${dollar}Lazy</code>.</dd>
    <dt><code>freeTrialPeriod</code></dt>
    <dd>Enter the value of the field <code>FTP_DAYS</code> in the same class.</dd>
    <dt><code>ftpKeyStoreFile</code></dt>
    <dd>Enter <code>ftp.ks</code>.</dd>
    <dt><code>ftpSecretMarkerClass</code></dt>
    <dd>Enter the parameter value of the last call to the method 
        <code>.storeInUserNode([...])</code> in the same class, but without the 
        <code>.class</code> suffix, e.g. <code>sun.security.provider.Sun</code>.</dd>
    <dt><code>licenseKeyFormat</code></dt>
    <dd>Search for the expression matching the pattern 
        <code>new *ManagementContext(SUBJECT)</code> in the same class and 
        select the value as follows:
        <ul>
            <li>For <code>new V1LicenseManagementContext(SUBJECT)</code>, 
                enter <code>V1</code>.</li>
            <li>For <code>new V2XmlLicenseManagementContext(SUBJECT)</code>, 
                enter <code>V2/XML</code>.</li>
            <li>For <code>new V2JsonLicenseManagementContext(SUBJECT)</code>, 
                enter <code>V2/JSON</code> (default).</li>
        </ul></dd>
    <dt><code>subject</code></dt>
    <dd>Enter the value of the field <code>SUBJECT</code> in the same class.</dd>
    <dt><code>package</code></dt>
    <dd>Enter the part of the package name before the <code>keymgr</code>
        element in the same class.</dd>
    <dt><code>preferencesType</code></dt>
    <dd>Search for the expression matching the pattern 
        <code>storeIn*Node(LicensingSchema.class)</code> and select the value 
        as follows:
        <ul>
            <li>For <code>storeInSystemNode(LicensingSchema.class)</code>, 
                enter <code>system</code>.</li>
            <li>For <code>storeInUserNode(LicensingSchema.class)</code>, 
                enter <code>user</code>.</li>
        </ul></dd>
</dl>

All other properties may have different values.

$h5 Migrating from the $project.name since version 2.4

If the old project was generated using the $project.name version 2.4 or later,
then you need to make sure that the values of the following properties are
equal:

* `editions`
* `freeTrialPeriod`
* `ftpKeyStoreFile`
* `ftpSecretMarkerClass`
* `keyStoreType`
* `licenseKeyFormat`
* `password`
* `pbeAlgorithm`
* `preferencesType`
* `privateKeyStoreFile`
* `publicKeyStoreFile`
* `subject`

All other properties may have different values.

$h4 Copying Keystores

Please copy the following files from the old project to the new project:

* `${dollar}{artifactId}-keygen/src/main/resources/${dollar}{privateKeyStoreFile}`
* `${dollar}{artifactId}-keymgr/src/main/resources/${dollar}{ftpKeyStoreFile}`
* `${dollar}{artifactId}-keymgr/src/main/resources/${dollar}{publicKeyStoreFile}`

Of course, the path names need to remain the same.

$h4 Customizing Properties

The parent POM file `pom.xml` contains a set of properties with the
following name patterns:

* `*Alias`
* `*Password`
* `*Type`

... where `*` matches any prefix.
Please check the documentation comments for each of these properties and
customize their values so that they match the configuration of the old project.

**If the old project was generated using the $project.name before version 2.4, 
then its generally necessary to change the value of the properties named 
`*Alias` to `mykey`**, which is the default alias name for any private key or 
trusted certificate entry generated by the Java `keytool`.

$h4 Building Your project

You are now set for [building your project] again.

---

#prev("Certifying Your Project" "certifying.html")
