<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2005-2015 Schlichtherle IT Services.
  ~ All rights reserved. Use is subject to license terms.
  -->
<schema elementFormDefault="qualified"
        targetNamespace="${project.url}/xml/archetypeProperties"
        version="${project.version}"
        xml:lang="en"
        xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:ap="${project.url}/xml/archetypeProperties"
        xmlns:h="http://www.w3.org/1999/xhtml">
    <element type="ap:ArchetypeProperties" name="archetypeProperties"/>
    <simpleType name="JavaIdentifier">
        <restriction>
            <simpleType>
                <restriction base="token">
                    <!-- Not exactly, but good enough for this purpose. -->
                    <pattern value="[A-Za-z_$][A-Za-z0-9_$]*"/>
                </restriction>
            </simpleType>
        </restriction>
    </simpleType>
    <simpleType name="JavaIdentifiers">
        <list itemType="ap:JavaIdentifier"/>
    </simpleType>
    <simpleType name="KeyPairAlgorithm">
        <restriction base="token">
            <enumeration value="-"/>
            <enumeration value="EC"/>
            <enumeration value="DSA"/>
            <enumeration value="RSA"/>
        </restriction>
    </simpleType>
    <simpleType name="KeyStoreType">
        <restriction base="token">
            <enumeration value="-"/>
            <enumeration value="JCEKS"/>
            <enumeration value="JKS"/>
            <enumeration value="PKCS12"/>
        </restriction>
    </simpleType>
    <simpleType name="LicenseKeyFormat">
        <restriction base="token">
            <enumeration value="-"/>
            <enumeration value="V1"/>
            <enumeration value="V2/JSON"/>
            <enumeration value="V2/XML"/>
        </restriction>
    </simpleType>
    <complexType name="ArchetypeProperties">
        <all>
            <element type="token" name="artifactId">
                <annotation>
                    <documentation>
                        The artifact ID of the parent
                        <h:a href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">
                            <h:abbr title="Project Object Model">POM</h:abbr>
                        </h:a>
                        for the generated project.
                        This could match the name of your software product, e.g.
                        <h:code>product</h:code>, or be generic, e.g.
                        <h:code>license</h:code>.
                        Whatever it is, it should be a lower-case string and
                        must not contain spaces.
                        See
                        <h:a href="http://maven.apache.org/pom.html#Maven_Coordinates">
                            Maven - POM Reference - Maven Coordinates
                        </h:a>.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="artifactName" minOccurs="0" default="-">
                <annotation>
                    <documentation>
                        The display name of the parent POM for the generated
                        project.
                        This could be the name of your software product, e.g.
                        <h:code>Product</h:code>, or be generic, e.g.
                        <h:code>License</h:code>.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="companyName">
                <annotation>
                    <documentation>
                        The display name of your company, e.g.
                        <h:code>Company Inc.</h:code>.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:Password" name="defaultPassword">
                <annotation>
                    <documentation>
                        The default password for accessing key stores,
                        encrypting license keys etc.
                        As a general requirement, passwords must be at least
                        eight characters long and contain letters and digits.
                        You should consider this to be the bare minimum.
                        Entering a longer password with additional punctation
                        characters improves the security level of your licensing
                        schema.
                    </documentation>
                </annotation>
            </element>
            <element type="boolean" name="disableLicenseWizard" minOccurs="0"
                     default="false">
                <annotation>
                    <documentation>
                        Whether or not the Swing wizard dialog in the Key
                        Manager module should be disabled.
                        Select
                        <h:code>true</h:code>
                        to cut the dependency on the TrueLicense Swing module
                        and reduce the code size.
                    </documentation>
                </annotation>
            </element>
            <element type="boolean" name="dynamicClassLoading" minOccurs="0"
                     default="false">
                <annotation>
                    <documentation>
                        Whether or not the classes referenced by the properties
                        with the name pattern
                        <h:code>*Class</h:code>
                        should get dynamically loaded at runtime.
                        Select
                        <h:code>false</h:code>
                        to statically
                        <h:code>new</h:code>
                        the classes in the generated code.
                        The advantage is that the classes can be safely included
                        in the byte code obfuscation process.
                        However, the classes need to be present on the class
                        path of the respective module at compile time.
                        Select
                        <h:code>true</h:code>
                        to dynamically load the classes at runtime.
                        The advantage is that the classes only need to be
                        present on the class path of the respective module at
                        runtime.
                        However, the classes need to be excluded from the byte
                        code obfuscation process, which is a security leak if
                        any dynamic class loading is done in the Key Manager
                        module.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:JavaIdentifiers" name="editions" minOccurs="0"
                     default="standard">
                <annotation>
                    <documentation>
                        A space separated list of edition names, ordered from
                        supersets to subsets, e.g.
                        <h:code>enterprise standard</h:code>.
                        Each name must be a valid Java identifier name and
                        should be a camel-case string with a lower-case initial
                        character.
                        The names
                        <h:code>edition</h:code>
                        and
                        <h:code>ftp</h:code>
                        are reserved for internal use.
                    </documentation>
                </annotation>
            </element>
            <element type="nonNegativeInteger" name="freeTrialPeriod"
                     minOccurs="0" default="0">
                <annotation>
                    <documentation>
                        The number of days for an auto-generated
                        <h:abbr title="Free Trial Period">FTP</h:abbr>.
                        Needs to be a non-negative integer, e.g.
                        <h:code>30</h:code>.
                        Specify
                        <h:code>0</h:code>
                        to disable the auto-generation of FTP license keys.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="ftpKeyStoreFile" minOccurs="0"
                     default="-">
                <annotation>
                    <documentation>
                        The path of the FTP key store file in the Key Manager
                        module relative to the base path
                        <h:code>
                            ${dollar}{artifactId}-keymgr/src/main/resources/
                        </h:code>.
                        This property is ignored if the property
                        <h:code>freeTrialPeriod</h:code>
                        is set to
                        <h:code>0</h:code>.
                        Otherwise, if the value is set to
                        <h:code>-</h:code>,
                        then it gets overridden with the value of the property
                        <h:code>publicKeyStoreFile</h:code>.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="ftpSecretMarkerClass" minOccurs="0"
                     default="n/a">
                <annotation>
                    <documentation>
                        A fully qualified binary class name which defines the
                        user or system preferences node to use for storing the
                        auto-generated FTP license key.
                        This property is ignored if the property
                        <h:code>freeTrialPeriod</h:code>
                        is set to
                        <h:code>0</h:code>.
                        Otherwise, the
                        <h:strong>package name</h:strong>
                        of the referenced class needs to be kept
                        <h:strong>absolutely secret</h:strong>
                        because removing the FTP license key from the
                        preferences node triggers the auto-generation of another
                        FTP license key!
                        The named class gets dynamically loaded at run time, so
                        it doesn't have to be on the compile time class path of
                        the Key Manager module.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="groupId">
                <annotation>
                    <documentation>
                        The group ID of the generated project.
                        This could be the reversed domain name for your company
                        plus the name of the software product.
                        See
                        <h:a href="http://maven.apache.org/pom.html#Maven_Coordinates">
                            Maven - POM Reference - Maven Coordinates
                        </h:a>.
                    </documentation>
                </annotation>
            </element>
            <element type="boolean" name="hideUninstallAction" minOccurs="0"
                     default="false">
                <annotation>
                    <documentation>
                        Whether or not the Swing wizard dialog in the Key
                        Manager module should hide the action for uninstalling
                        the license key.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="keyGenLicenseValidationClass"
                     minOccurs="0" default="-">
                <annotation>
                    <documentation>
                        A fully qualified binary class name which implements the
                        interface
                        <h:a href="../apidocs/${apiPackagePath}/LicenseValidation.html">
                            <h:code>${apiPackage}.LicenseValidation</h:code>
                        </h:a>
                        for use in the Key Generator module.
                        Select
                        <h:code>-</h:code>
                        to use only the built-in license validation function.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:ValidationFunction"
                     name="keyGenLicenseValidationFunction" minOccurs="0"
                     default="decorate">
                <annotation>
                    <documentation>
                        Selects the function for license validation in the Key
                        Generator module.
                        This property is ignored if the property
                        <h:code>keyGenLicenseValidationClass</h:code>
                        is set to
                        <h:code>-</h:code>.
                        Otherwise, select
                        <h:code>override</h:code>
                        to apply only the the custom license validation function
                        which is implemented by the
                        <h:code>${dollar}{keyGenLicenseValidationClass}</h:code>
                        .
                        Select
                        <h:code>decorate</h:code>
                        instead to apply both the custom license validation
                        function and the built-in license validation function.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="keyMgrClockClass" minOccurs="0"
                     default="-">
                <annotation>
                    <documentation>
                        A fully qualified binary class name which implements the
                        interface
                        <h:a href="../apidocs/${miscApiPackagePath}/Clock.html">
                            <h:code>${miscApiPackage}.Clock</h:code>
                        </h:a>
                        for use in the Key Manager module.
                        Select
                        <h:code>-</h:code>
                        to use the system clock.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="keyMgrLicenseValidationClass"
                     minOccurs="0" default="-">
                <annotation>
                    <documentation>
                        A fully qualified binary class name which implements the
                        interface
                        <h:a href="../apidocs/${apiPackagePath}/LicenseValidation.html">
                            <h:code>${apiPackage}.LicenseValidation</h:code>
                        </h:a>
                        for use in the Key Manager module.
                        Select
                        <h:code>-</h:code>
                        to use only the built-in license validation function.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:ValidationFunction"
                     name="keyMgrLicenseValidationFunction" minOccurs="0"
                     default="decorate">
                <annotation>
                    <documentation>
                        Selects the function for license validation in the Key
                        Manager module.
                        This property is ignored if the property
                        <h:code>keyMgrLicenseValidationClass</h:code>
                        is set to
                        <h:code>-</h:code>.
                        Otherwise, select
                        <h:code>override</h:code>
                        to apply only the the custom license validation function
                        which is implemented by the
                        <h:code>${dollar}{keyMgrLicenseValidationClass}</h:code>.
                        Select
                        <h:code>decorate</h:code>
                        instead to apply both the custom license validation
                        function and the built-in license validation function.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:KeyPairAlgorithm" name="keyPairAlgorithm"
                     minOccurs="0" default="-">
                <annotation>
                    <documentation>
                        The algorithm to use when generating key pairs in the
                        key store files on the first build.
                        This property is ignored if the key store files already
                        exist.
                        The algorithm needs to be supported by one of the
                        security providers which are installed in the JRE.
                        See
                        <h:a href="http://docs.oracle.com/javase/${javase.major}/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator">
                            Java Cryptography Architecture Standard Algorithm
                            Name Documentation - KeyPairGenerator Algorithms
                        </h:a>.
                    </documentation>
                </annotation>
            </element>
            <element type="nonNegativeInteger" name="keyPairSize" minOccurs="0"
                     default="0">
                <annotation>
                    <documentation>
                        The key size in bits when generating key pairs in the
                        key store files at the first build.
                        This property is ignored if the key store files already
                        exist.
                        Otherwise, if the value is set to
                        <h:code>0</h:code>,
                        then the default value of the keytool is used.
                        Otherwise, the bit size needs to match the configured
                        <h:code>${dollar}{keyPairAlgorithm}</h:code>
                        and be supported by one of the security providers which
                        are installed in the JRE/JDK.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:KeyStoreType" name="keyStoreType" minOccurs="0"
                     default="-">
                <annotation>
                    <documentation>
                        The default key store type.
                        The type needs to be supported by one of the security
                        providers which are installed in the JRE.
                        If the value is set to
                        <h:code>-</h:code>,
                        then it gets overridden as follows:
                        If the value of the
                        <h:code>licenseKeyFormat</h:code>
                        property is set to
                        <h:code>V1</h:code>,
                        then this gets set to
                        <h:code>JKS</h:code>,
                        otherwise it gets set to
                        <h:code>JCEKS</h:code>.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:LicenseKeyFormat" name="licenseKeyFormat"
                     minOccurs="0" default="V2/JSON">
                <annotation>
                    <documentation>
                        The format of the license keys.
                        Select
                        <h:code>V1</h:code>
                        if you need to retain compatibility with license keys
                        generated with TrueLicense 1.
                        Otherwise, select
                        <h:code>V2/XML</h:code>
                        if you want to exclude an additional dependency on the
                        Jackson JSON Processor.
                        Otherwise, select
                        <h:code>V2/JSON</h:code>
                        for the smallest license keys and the fastest
                        processing.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="licensingSubject">
                <annotation>
                    <documentation>
                        The licensing subject.
                        The value of this property gets stored in the generated
                        license keys and is used for validation.
                        A
                        <h:a href="../apidocs/${apiPackagePath}/LicenseValidationException.html">
                            <h:code>${apiPackage}.LicenseValidationException
                            </h:code>
                        </h:a>
                        is thrown if the validation fails.
                        It's best practice to include the name of your software
                        product and a version number range for which the license
                        keys are valid, e.g.
                        <h:code>Product 1</h:code>
                        or
                        <h:code>Product 1.X</h:code>.
                        The license validation step compares the entire string,
                        so the version number format doesn't matter.
                        If you want to obsolete existing license keys in a
                        future release then all you need to do is to change the
                        value, e.g. to
                        <h:code>Product 2</h:code>
                        or
                        <h:code>Product 2.X</h:code>.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="package" minOccurs="0">
                <annotation>
                    <documentation>
                        The base package name of the generated project.
                        It's best practice to use the expression
                        <h:code>${dollar}{groupId}</h:code>
                        or
                        <h:code>${dollar}{groupId}.${dollar}{artifactId}</h:code>
                        if this results in a valid package name.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:PbeAlgorithm" name="pbeAlgorithm" minOccurs="0"
                     default="-">
                <annotation>
                    <documentation>
                        The algorithm for the password based encryption.
                        The algorithm needs to be supported by one of the
                        security providers which are installed in the JRE.
                        If the value is set to
                        <h:code>-</h:code>,
                        then it gets overridden as follows:
                        If the value of the
                        <h:code>licenseKeyFormat</h:code>
                        property is set to
                        <h:code>V1</h:code>,
                        then this gets set to
                        <h:code>PBEWithMD5AndDES</h:code>,
                        otherwise it gets set to
                        <h:code>PBEWithSHA1AndDESede</h:code>.
                        See
                        <h:a href="http://docs.oracle.com/javase/${javase.major}/docs/technotes/guides/security/StandardNames.html#Cipher">
                            Java Cryptography Architecture Standard Algorithm
                            Name Documentation - Cipher (Encryption) Algorithms
                        </h:a>.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:PreferencesType" name="preferencesType"
                     minOccurs="0" default="user">
                <annotation>
                    <documentation>
                        The type of the preferences nodes where to install
                        license keys.
                        Note that the value
                        <h:code>system</h:code>
                        generally requires the JVM to be run with administrator
                        privileges or otherwise a
                        <h:a href="http://docs.oracle.com/javase/${javase.major}/docs/api/java/util/prefs/BackingStoreException.html">
                            <h:code>java.util.prefs.BackingStoreException</h:code>
                        </h:a>
                        may get thrown by the generated integration tests.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="privateKeyStoreFile" minOccurs="0"
                     default="private.ks">
                <annotation>
                    <documentation>
                        The path of the private key store file in the Key
                        Generator module relative to the base path
                        <h:code>
                            ${dollar}{artifactId}-keygen/src/main/resources/
                        </h:code>.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="publicKeyStoreFile" minOccurs="0"
                     default="public.ks">
                <annotation>
                    <documentation>
                        The path of the public key store file in the Key
                        Manager module relative to the base path
                        <h:code>
                            ${dollar}{artifactId}-keymgr/src/main/resources/
                        </h:code>.
                    </documentation>
                </annotation>
            </element>
            <element type="ap:SignatureAlgorithm" name="signatureAlgorithm"
                     minOccurs="0" default="-">
                <annotation>
                    <documentation>
                        The algorithm to use when signing a generated key
                        pair in a key store file at the first build.
                        This property is ignored if the key store file already
                        exists.
                        Otherwise, if the value is set to
                        <h:code>-</h:code>,
                        then the default value of the keytool is used.
                        Otherwise, the signature algorithm needs to match the
                        configured
                        <h:code>${dollar}{keyPairAlgorithm}</h:code>
                        and be supported by one of the security providers which
                        are installed in the JRE/JDK.
                        See
                        <h:a href="http://docs.oracle.com/javase/${javase.major}/docs/technotes/guides/security/StandardNames.html#Signature">
                            Java Cryptography Architecture Standard Algorithm
                            Name Documentation - Signature Algorithms
                        </h:a>.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="trueLicenseVersion" minOccurs="0"
                     default="${project.version}">
                <annotation>
                    <documentation>
                        The TrueLicense version to depend upon.
                    </documentation>
                </annotation>
            </element>
            <element type="boolean" name="verboseCli" minOccurs="0"
                     default="false">
                <annotation>
                    <documentation>
                        Whether or not the
                        <h:abbr title="Command Line Interface">CLI</h:abbr>
                        should write debugging information to the standard error
                        stream by default.
                    </documentation>
                </annotation>
            </element>
            <element type="token" name="version">
                <annotation>
                    <documentation>
                        The version of the generated project.
                        This should be the version of your software product.
                        Whatever it is, it needs to match the
                        <h:a href="http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-pom-syntax.html#pom-reationships-sect-versions">
                            Maven version number
                        </h:a>
                        requirements.
                        See
                        <h:a href="http://maven.apache.org/pom.html#Maven_Coordinates">
                            Maven - POM Reference - Maven Coordinates
                        </h:a>.
                    </documentation>
                </annotation>
            </element>
        </all>
        <attribute type="token" name="version" use="optional"/>
    </complexType>
    <simpleType name="Password">
        <restriction base="string">
            <minLength value="8"/>
        </restriction>
    </simpleType>
    <simpleType name="PbeAlgorithm">
        <restriction base="token">
            <enumeration value="-"/>
            <enumeration value="PBEWithMD5AndDES"/>
            <enumeration value="PBEWithSHA1AndDESede"/>
            <enumeration value="PBEWithHmacSHA1AndAES_128"/>
            <enumeration value="PBEWithHmacSHA224AndAES_128"/>
            <enumeration value="PBEWithHmacSHA256AndAES_128"/>
            <enumeration value="PBEWithHmacSHA384AndAES_128"/>
            <enumeration value="PBEWithHmacSHA512AndAES_128"/>
            <enumeration value="PBEWithHmacSHA1AndAES_256"/>
            <enumeration value="PBEWithHmacSHA224AndAES_256"/>
            <enumeration value="PBEWithHmacSHA256AndAES_256"/>
            <enumeration value="PBEWithHmacSHA384AndAES_256"/>
            <enumeration value="PBEWithHmacSHA512AndAES_256"/>
        </restriction>
    </simpleType>
    <simpleType name="PreferencesType">
        <restriction base="token">
            <enumeration value="system"/>
            <enumeration value="user"/>
        </restriction>
    </simpleType>
    <simpleType name="SignatureAlgorithm">
        <restriction base="token">
            <enumeration value="-"/>
            <enumeration value="NONEwithDSA"/>
            <enumeration value="SHA1withDSA"/>
            <enumeration value="SHA224withDSA"/>
            <enumeration value="SHA256withDSA"/>
            <enumeration value="NONEwithECDSA"/>
            <enumeration value="SHA1withECDSA"/>
            <enumeration value="SHA224withECDSA"/>
            <enumeration value="SHA256withECDSA"/>
            <enumeration value="SHA384withECDSA"/>
            <enumeration value="SHA512withECDSA"/>
            <enumeration value="NONEwithRSA"/>
            <enumeration value="SHA1withRSA"/>
            <enumeration value="SHA224withRSA"/>
            <enumeration value="SHA256withRSA"/>
            <enumeration value="SHA384withRSA"/>
            <enumeration value="SHA512withRSA"/>
        </restriction>
    </simpleType>
    <simpleType name="ValidationFunction">
        <restriction base="token">
            <enumeration value="decorate"/>
            <enumeration value="override"/>
        </restriction>
    </simpleType>
</schema>
