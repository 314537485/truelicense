##
## Copyright (C) 2005-2015 Schlichtherle IT Services.
## All rights reserved. Use is subject to license terms.
##
#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')
<head>
    <title>Overview</title>
</head>

$h2 Overview

<p class="lead">$project.description</p>

$h3 Features

Using the $project.name you can...

* Consume license keys using a RESTful web service interface based on JAX-RS.
* Produce JSON or XML responses.
* On error, respond with an appropriate HTTP status code,
  e.g. 402 "Payment Required".

$h3 Usage

The service is implemented by the class
[`LicenseConsumerService`](../apidocs/net/java/truelicense/ws/rs/LicenseConsumerService.html)
and accompanied by the exception mapper class
[`LicenseConsumerServiceExceptionMapper`](../apidocs/net/java/truelicense/ws/rs/LicenseConsumerServiceExceptionMapper.html).
With a typical container, you should just let it scan the package
[`org.truelicense.ws.rs`](../apidocs/net/java/truelicense/ws/rs/package-summary.html)
so that it can find these classes.

The `LicenseConsumerService` needs a
[`LicenseConsumerManager`](../apidocs/net/java/truelicense/core/LicenseConsumerManager.html)
as its dependency.
If no dependency injection framework is available, you can satisfy this
dependency using:

    package [...];

    import javax.ws.rs.ext.*;
    import org.truelicense.core.LicenseConsumerManager;

    @Provider
    public class LicenseConsumerManagerResolver
    implements ContextResolver<LicenseConsumerManager> {
        @Override public LicenseConsumerManager getContext(Class<?> ignored) {
            return LicensingSchema.manager();
        }
    }

where `LicensingSchema` is your custom licensing schema,
e.g. as generated by the
[TrueLicense Maven Archetype](../truelicense-maven-archetype/index.html).

If CDI is used for Dependency Injection, then you can let the container
inject the dependency instead.
If you have used the
[TrueLicense Maven Archetype](../truelicense-maven-archetype/index.html)
to generate a project, then you just need to annotate the `LicensingSchema`
class in the KeyMgr module like this:

    package ${package}.keymgr;

    import javax.enterprise.context.ApplicationScoped;
    import javax.enterprise.inject.Produces;
    import org.truelicense.core.LicenseConsumerManager;
    [...]

    public class LicensingSchema {

        [...]

        /** Returns the first license consumer manager in the configured chain-of-responsibility. [...] */
        @Produces @ApplicationScoped
        public static LicenseConsumerManager manager() { [...] }
    }

The `@Produces` annotation tells the container that it should call the
`manager()` method to obtain the license consumer manager.
The returned object is a singleton which is typically not serializable, so the
`@ApplicationScoped` annotation is used to wrap it in a serializable proxy with
application scope.
This is required to serialize any clients which hold a reference to a license
consumer manager.

Last, but not least, you need to create a `beans.xml` file so that the CDI
container scans the class path with the `LicensingSchema` class.
