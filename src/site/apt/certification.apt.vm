##
## Copyright (C) 2005-2015 Schlichtherle IT Services.
## All rights reserved. Use is subject to license terms.
##
## Deprecated: This page is kept to protect the referential integrity of URLs
## which have been sent to customers before the release of TrueLicense 2.4.
## Since TrueLicense 2.4, the URL ./truelicense-maven-archetype/certifying.html
## should be sent instead.
    -----------------------
    Certification Procedure
    -----------------------
    Christian Schlichtherle
    -----------------------

Certification Procedure

    First, <<thank you very much for purchasing a commercial license
    agreement for TrueLicense!>>

    To complete your order, we need to cooperate in order to generate a trusted
    certificate entry in the keystore which is embedded in your product so that
    it can successfully verify license keys.
    Don't panic - it's quite simple.
    This section walks you through the procedure.

* Prerequisites

    First, you need to have a license vendor application alias key generator
    ready for your product.

    In case you haven't already done so, please follow the documentation of the
    {{{./truelicense-maven-archetype/index.html}TrueLicense Maven Archetype}}
    in order to generate a sample project for you.
    If you have already done this, mind you that you must follow the
    instructions to
    {{{./truelicense-maven-archetype/customizing.html}customize}}
    the generated keys and passwords of the sample project.
    <<REUSING THE GENERATED KEYS AND PASSWORDS AS IS COMPLETELY VOIDS THE
    PROTECTION OF YOUR PRODUCT!>>

* Issuing the Certificate Signing Request

    Next, you need to issue a Certificate Signing Request (CSR).
    First, change to the {{{./truelicense-maven-archetype/generating.html}generated sample directory}}:

+--
$ cd $PROJECT
+--

    Then submit the following command:

+--
$ keytool -certreq -keystore keygen/src/main/resources/private.ks -storetype jceks
+--

    Once you've entered the password for the keystore, you should see some
    output like this:

+--
-----BEGIN NEW CERTIFICATE REQUEST-----
MIICnDCCAYQCAQAwJzElMCMGA1UEAxMcVHJ1ZUxpY2Vuc2UgMiBTYW1wbGUgUHJvamVjdDCCASIw
DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAI/j1yvXjrHJOZRDj3fmAygwfevaqoBjBfok+JDV
QTA5Mc60wxWMbOlsQhkdldPXemgpA7UoQRDN/KlOAnDHyjN66RBRVeEe561itYtFBfTBXrnuEoAP
1WPEcDwmS/1uzGLak//PoP/WTE3E4mVAzXJYDiAx7gRL/+k3UiyDKObzZ8ZUSMrd0UvZp/zNxBF/
a26dGlKPXJGPGkO7E7eTgMS6yh4UhCoD6iBufCL8cmmfMT+PkdJHA3+h0cYw7ptqcbFQ22sHgWZ5
VTl54ZeHZMdC8cufT28nxJ11L1y56bI5cbXdEzMYlkJTMnXTlhw+VQntMOhbTOO6ziKHaRH6R4MC
AwEAAaAwMC4GCSqGSIb3DQEJDjEhMB8wHQYDVR0OBBYEFF4Y7LLAhuFIljvLTT5dAHhDIH1WMA0G
CSqGSIb3DQEBCwUAA4IBAQBxTspAnDoefC71uoCQXnWjpvrfDPzfnSV7RqaIZoGx7IHVzB6mlMpJ
2OI/O8mxvsem2hMvX8EeIG/SDOEDkbawq7XflMcfXAguRGHB/t2y8XaN+VayyAhAB/erY9mHF/rd
1md4levKcPUywMpIUWCxkoZyjTXD6U+KcKJaajGnvcHNLsmopl6eIWkksTIlO5B1KJc64NtI0Dl6
ycKY7knnl1V53euX59yhfz3og4vjlQNOSet9uFe0Q2MRY06NVi1uzv9E9rMv0srd18amjB5m8EdC
z5UXVCwHhByE5MCTFs6TdlPZ2tHNUfNNet/clDpfJ2SI/KE8u7Skn9vqHdgr
-----END NEW CERTIFICATE REQUEST-----
+--

    Copy-paste this into an email and send it to <<<sales>>> AT
    <<<schlichtherle>>> DOT <<<de>>>.

    Don't worry about security, the CSR just contains your public key, not your
    private key, so there is no confidential data in it.
    Actually, you can decode the information in this request if you copy-paste
    the CSR into the following command:

+--
$ keytool -printcertreq -v
+--

    You generally need to terminate your input by typing Ctrl-D to signal
    End-Of-File to the key tool.

* Validating the Certificate Response

    Next, you will get an email with the Certificate Response (CR) in the
    message body which looks like this:

+--
----BEGIN CERTIFICATE-----
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...
-----END CERTIFICATE-----
+--

    Although not strictly required, it's generally recommended to decode the
    information in the CSR by copy-pasting it into the following command:

+--
$ keytool -printcert -v
+--

    You generally need to terminate your input by typing Ctrl-D to signal
    End-Of-File to the key tool.

    Note that the CR contains two certificates:
    The first certificate contains your public key and is signed by the
    X.500 principal with the distinguished name
    <<<CN=TrueLicense 2, O=Schlichtherle IT Services>>>.
    The second certificate contains the public key for signing the first
    certificate and is signed by the X.500 principal with the distinguished
    name
    <<<CN=Schlichtherle IT Services, OU=Schlichtherle IT Services, O=Schlichtherle IT Services, L=Berlin, ST=Berlin, C=DE>>>.
    Because the second certificate is a self-signed certificate, you should
    check that its serial number and SHA-256 fingerprint match one of the
    following two entries:

*--+--+--+
||Key Algorithm||Serial Number||SHA-256 fingerprint||
*--+--+--+
|DSA|<<<76dbe28c>>>|<<<21:B0:86:6F:E6:DE:9E:DA:A2:E9:50:8B:07:CE:B5:E6:12:87:C7:B6:4D:89:A9:C7:40:B8:63:F7:DB:7D:EB:AA>>>|
*--+--+--+
|RSA|<<<ac44e3d>>>|<<<E1:51:B1:96:6F:79:67:D3:BA:56:D4:B1:D4:F0:D0:12:D5:22:C7:9A:64:2C:DA:77:87:3F:93:91:85:BD:8F:E5>>>|
*--+--+--+

    You need to confirm this when importing the CR later.

* Importing the Certificate Response into the License Vendor Application

    Next, you need to import the CR into the key generator.
    Submit the following command:

+--
$ keytool -importcert -keystore keygen/src/main/resources/private.ks -storetype jceks
+--

    You generally need to terminate your input by typing Ctrl-D to signal
    End-Of-File to the key tool.
    Because the second certificate is self-signed, you need to confirm to trust
    it - see above.

    Now the private keystore of the license vendor application contains a
    private key entry with a private/public key pair which has been signed
    by TrueLicense 2.

* Importing the Certificate Response into the License Consumer Application

    Next, you need to recreate the public keystore for the key manager.
    Submit the following commands.

+--
$ rm keymgr/src/main/resources/public.ks
$ keytool -exportcert \
    -keystore keygen/src/main/resources/private.ks \
    -storetype jceks \
    -file public.cert
$ keytool -importcert \
    -keystore keymgr/src/main/resources/public.ks \
    -storetype jceks \
    -file public.cert
$ rm public.cert
+--

    Now the public keystore of the license consumer application contains a
    trusted certificate key entry with a public key which has been signed by
    TrueLicense 2.

    <<You are now ready to generate and sell license keys - congratulations!>>
